/*
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
*/
package main

import (
	"fmt"
	"math"
)

func main() {
	triangle := 0
	n := 500
	a := 1

	for triangle < n {
		triangle += a
		a += 1
	}

	div := 0
	for div <= 500 {
		triangle += a
		a += 1
		div = findDivisors(triangle)
	}

	fmt.Println(triangle)
}

func findDivisors(triangle int) int {
	nd := 1
	limit := int(math.Sqrt(float64(triangle)))
	for i := 1; i <= limit; i++ {
		if triangle % i == 0 {
			if i == limit {
				nd += 1
			} else {
				nd += 2
			}
		}
	}

	return nd
}
